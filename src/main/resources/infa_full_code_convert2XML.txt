/*
* Copyright (c) 1993-2019 Informatica LLC. All Rights Reserved.
* See patents at https://www.informatica.com/legal/patents.html.
*
* This is a read only file generated by Informatica Developer client tool.
* This contains the user snippets code as well as other generated code.
* User snippet code is embedded in this file within appropriate 
* comments.
*/

package com.informatica.powercenter.server.jtx;

import com.informatica.powercenter.sdk.server.IBufferInit;
import com.informatica.powercenter.sdk.server.IInputBuffer;
import com.informatica.powercenter.sdk.server.IOutputBuffer;
import com.informatica.powercenter.sdk.repository.IGroup;
import com.informatica.powercenter.sdk.repository.IField;
import com.informatica.powercenter.sdk.SDKException;
import com.informatica.messages.InfaMessage;
import com.informatica.powercenter.sdk.server.ERowType;
import com.informatica.powercenter.sdk.server.ELogMsgLevel;
import com.informatica.metadata.common.transformation.TransformationScope;
import com.informatica.products.jtx.JtxMsg;
import com.informatica.powercenter.sdk.server.DataTruncatedException;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.Objects;



// Start of 'Import Package' snippet.
// ToDo: Enter the Java packages to be  imported here
// For example, if you want to use Hashtable in any of the snippets, import the Hashtable // as shown below:
 // 
// import java.util.Hashtable;

import java.io.BufferedWriter;
import java.io.IOException;
//import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.util.*;
import java.io.File;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

// End of 'Import Package' snippet.

/**
* This class is a partition level class, which encapsulates the logic specified
* by the user in various Java Transformation code snippets. One instance of this
* class will be used to serve each partition.
*/
public class JTXPartitionDriverImplGen extends JTXPartitionDriverImplFixed
{

	// Start of 'Helper code' snippet.
	// ToDo: Declare static and non-static  partition level variables and functions here
	// For example,
	// 
	// static int countNullRows;            // counts the number of output rows across all partitions containing null values
	// int partCountNullRows;               // counts the number of output rows in this partition containing null values
	// 
	static Object lock = new Object();   // lock to synchronize nrRows
	static int nrRows;
	int partNrRows;
	static int nrFiles =1;
	int partNrFiles =1;
	int fixedNrFiles=0;
	int rc;
	static String oneFilePerRow ="X";
	//static String xsd ="UNKNOWN";
	static String target ="UNKNOWN";
	//static Path pathXsd;
	static Path pathXml;
	static String elements = "UNKNOWN";
	static String root ="UNKNOWN";
	static String level1 ="UNKNOWN";
	
	static ArrayList<String> elementList = null;
	ArrayList<String> values =null;
	
	// End of 'Helper code' snippet.

	// Start of 'Java Expressions' snippet.
	private int checkSettings() throws SDKException {
		//do some checks
		//TODO: More to come
		if(!isInFldConnected("oneFilePerInputRow")) {
			oneFilePerRow = "N";
		} else {
		      if (isNull("oneFilePerInputRow")) {
		      	oneFilePerRow = "N";
		      }
		}
	
	/*	
	//xsdFile checks
		if(isNull("xsdFile")) {
			resultCode ="ERR-0001";
			resultMessage ="You must specify an XSD file.";
		}
		if(Files.isRegularFile(pathXsd)) {
			logInfo("XSD file >" + xsd +"< was found");
			if(Files.isReadable(pathXsd)) {
				logInfo("Can read XSD file >" + xsd + "<");
			} else {
				logError("Cannot read XSD file >" + xsd + "<. Check file/directory permissions");
				resultCode ="ERR-0004";
				resultMessage="Cannot read XSD file >" + xsd + "<. Check file/directory permissions";
			}
		} else {
			logError("XSD file >" + xsd + "< was not found");
			resultCode ="ERR-0003";
			resultMessage ="XSD file >" + xsd + "< was not found";
		}
	*/
	
	//targetFileName checks
		if(isNull("targetFileName")) {
			resultCode ="ERR-0002";
			resultMessage ="You must specify a target file name.";
		}
		
		if(resultCode.equals("OK"))
			return 0;
		else
			return -1;
	}
	//check each row
	private int checkInput() {
		return 0;
	}
	// output important settings and parameters
	void outSettings() {
	//	logInfo("Provided xsdFile >" + xsd + "<");
		logInfo("Provided targetFile >" + target + "<");
		logInfo("Determined oneFilePerInputRow >" + oneFilePerRow + "<");
		logInfo("Provided rootElement name >" + root +"<.");
		logInfo("Provided level1Element name >" + level1 +"<.");
	}
	
	void generateXmlFile() throws SDKException {
		String currentTarget = target + "_" + nrRows +".xml";
		Path pathXmlFile = Paths.get(currentTarget);
		try {
			Files.createFile(pathXmlFile);
			writeDataTo(pathXmlFile, currentTarget);
		} catch (FileAlreadyExistsException e) {
			failSession("xml file already exists: " + e.toString());
		} catch (IOException ioe) {
			failSession("could not create xml file: " + ioe.toString());
		}
	}
	
	String getRootElement() {
		return this.root;
	}
	
	void writeDataTo(Path pathXmlFile, String xmlFileName) throws SDKException {
		try {
	/*		String testString ="<dummy>Testing1.2.3.</dummy>";
			BufferedWriter bw = Files.newBufferedWriter(pathXmlFile, StandardCharsets.UTF_8);
			bw.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			bw.write(testString, 0, testString.length());
			bw.newLine();
			bw.close();
	*/
		DocumentBuilderFactory documentFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder documentBuilder = documentFactory.newDocumentBuilder();
		Document document = documentBuilder.newDocument();
		//root element
		Element rootElement = document.createElement(getRootElement()); 
		document.appendChild(rootElement);
		//level1 element
		Element level1Element = document.createElement(level1);
		rootElement.appendChild(level1Element);
		Element element = null;
		
		Iterator itr = elementList.iterator(); 
		for(String elem : elementList) {
			element = document.createElement(elem);
			level1Element.appendChild(element);
		}
		
		//TODO: The rest, like adding the values to the elements
		
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		DOMSource domSource = new DOMSource(document);
		StreamResult streamResult = new StreamResult(new File(xmlFileName));
		transformer.transform(domSource, streamResult);
		
		partNrFiles++;
		synchronized(lock)
			{
				nrFiles++;
			}
		
		} catch (ParserConfigurationException ep) {
			failSession("Could not write to xml file. Parser Configuration exception occurred: " + ep.toString());
		} /*catch (TransformerConfigurationException etc) {
			failSession("Could not write to xml file. Transformer Configuration exception occurred: " + etc.toString());
		} */ catch (TransformerException et) {
			failSession("Could not write to xml file. Transformer exception occurred:: " + et.toString());
		}
	}
	// End of 'Java Expressions' snippet.


	private StringBuffer strBuf = new StringBuffer();	
	private String resultCode;
	private String resultMessage;
	private int nrFilesCreated;

	/**
	 * This function is called by Integration Service once for each session for 
	 * a given transformation partition. 
	 * @param inBufInit List of objects of IBufferInit for input groups.
	 * @param outBufInit List of objects of IBufferInit for output groups.
	 */
	public void init(List inBufInits, List outBufInits) throws SDKException
	{
		IBufferInit inBufInit = (IBufferInit)inBufInits.get(0);
		IBufferInit outBufInit = (IBufferInit)outBufInits.get(0);
		outputBufCap = outBufInit.getCapacity();
		initialize();

		if(isInFldConnected("elementNames"))
		{
			if(jtxUtils.isServerUnicodeMode())
				inBufInit.bindColumnDataType(0,IField.JDataType.UNICHAR);
			else
				inBufInit.bindColumnDataType(0,IField.JDataType.CHAR);
		}

		if(isInFldConnected("targetFileName"))
		{
			if(jtxUtils.isServerUnicodeMode())
				inBufInit.bindColumnDataType(1,IField.JDataType.UNICHAR);
			else
				inBufInit.bindColumnDataType(1,IField.JDataType.CHAR);
		}

		if(isInFldConnected("oneFilePerInputRow"))
		{
			if(jtxUtils.isServerUnicodeMode())
				inBufInit.bindColumnDataType(2,IField.JDataType.UNICHAR);
			else
				inBufInit.bindColumnDataType(2,IField.JDataType.CHAR);
		}

		if(isInFldConnected("rootElement"))
		{
			if(jtxUtils.isServerUnicodeMode())
				inBufInit.bindColumnDataType(3,IField.JDataType.UNICHAR);
			else
				inBufInit.bindColumnDataType(3,IField.JDataType.CHAR);
		}

		if(isInFldConnected("level1Element"))
		{
			if(jtxUtils.isServerUnicodeMode())
				inBufInit.bindColumnDataType(4,IField.JDataType.UNICHAR);
			else
				inBufInit.bindColumnDataType(4,IField.JDataType.CHAR);
		}

		if(isInFldConnected("Value1"))
		{
			if(jtxUtils.isServerUnicodeMode())
				inBufInit.bindColumnDataType(5,IField.JDataType.UNICHAR);
			else
				inBufInit.bindColumnDataType(5,IField.JDataType.CHAR);
		}

		if(isInFldConnected("Value2"))
		{
			if(jtxUtils.isServerUnicodeMode())
				inBufInit.bindColumnDataType(6,IField.JDataType.UNICHAR);
			else
				inBufInit.bindColumnDataType(6,IField.JDataType.CHAR);
		}

		if(isInFldConnected("Value3"))
		{
			if(jtxUtils.isServerUnicodeMode())
				inBufInit.bindColumnDataType(7,IField.JDataType.UNICHAR);
			else
				inBufInit.bindColumnDataType(7,IField.JDataType.CHAR);
		}

		if(isInFldConnected("Value4"))
		{
			if(jtxUtils.isServerUnicodeMode())
				inBufInit.bindColumnDataType(8,IField.JDataType.UNICHAR);
			else
				inBufInit.bindColumnDataType(8,IField.JDataType.CHAR);
		}

		if(isInFldConnected("Value5"))
		{
			if(jtxUtils.isServerUnicodeMode())
				inBufInit.bindColumnDataType(9,IField.JDataType.UNICHAR);
			else
				inBufInit.bindColumnDataType(9,IField.JDataType.CHAR);
		}

		if(isInFldConnected("Value6"))
		{
			if(jtxUtils.isServerUnicodeMode())
				inBufInit.bindColumnDataType(10,IField.JDataType.UNICHAR);
			else
				inBufInit.bindColumnDataType(10,IField.JDataType.CHAR);
		}

		if(isInFldConnected("Value7"))
		{
			if(jtxUtils.isServerUnicodeMode())
				inBufInit.bindColumnDataType(11,IField.JDataType.UNICHAR);
			else
				inBufInit.bindColumnDataType(11,IField.JDataType.CHAR);
		}

		if(isInFldConnected("Value8"))
		{
			if(jtxUtils.isServerUnicodeMode())
				inBufInit.bindColumnDataType(12,IField.JDataType.UNICHAR);
			else
				inBufInit.bindColumnDataType(12,IField.JDataType.CHAR);
		}

		if(isInFldConnected("Value9"))
		{
			if(jtxUtils.isServerUnicodeMode())
				inBufInit.bindColumnDataType(13,IField.JDataType.UNICHAR);
			else
				inBufInit.bindColumnDataType(13,IField.JDataType.CHAR);
		}

		if(isInFldConnected("Value10"))
		{
			if(jtxUtils.isServerUnicodeMode())
				inBufInit.bindColumnDataType(14,IField.JDataType.UNICHAR);
			else
				inBufInit.bindColumnDataType(14,IField.JDataType.CHAR);
		}

		if(isOutFldProjected("resultCode"))
		{
			if(jtxUtils.isServerUnicodeMode())
				outBufInit.bindColumnDataType(0,IField.JDataType.UNICHAR);
			else
				outBufInit.bindColumnDataType(0,IField.JDataType.CHAR);
		}

		if(isOutFldProjected("resultMessage"))
		{
			if(jtxUtils.isServerUnicodeMode())
				outBufInit.bindColumnDataType(1,IField.JDataType.UNICHAR);
			else
				outBufInit.bindColumnDataType(1,IField.JDataType.CHAR);
		}

		if(isOutFldProjected("nrFilesCreated"))
		{
			outBufInit.bindColumnDataType(2,IField.JDataType.INT);
		}
	}

	/**
	 * This function is called by the Integration Service when data is available
	 * for the input group.
	 * @param grp Input group on which the data is available.
	 * @param inputBuf Input Data buffer corresponding to the group.
	 */
	public void execute(IGroup grp, IInputBuffer inputBuf) throws SDKException
	{
		setInputBuffer(inputBuf);
		outputBuf = (IOutputBuffer)getOutputBuffers().get(0);
		int numRowsAvailable = inputBuf.getNumRowsAvailable();
		inRowNum=0;

		Object defaultObj;
		String elementNames;
		String targetFileName;
		String oneFilePerInputRow;
		String rootElement;
		String level1Element;
		String Value1;
		String Value2;
		String Value3;
		String Value4;
		String Value5;
		String Value6;
		String Value7;
		String Value8;
		String Value9;
		String Value10;

		for(int jtx_row_counter=1 ;jtx_row_counter<= numRowsAvailable;jtx_row_counter++)
		{
			try
			{

				resultCode = null;
				resultMessage = null;
				nrFilesCreated = 0;
				

				elementNames = null;
				targetFileName = null;
				oneFilePerInputRow = null;
				rootElement = null;
				level1Element = null;
				Value1 = null;
				Value2 = null;
				Value3 = null;
				Value4 = null;
				Value5 = null;
				Value6 = null;
				Value7 = null;
				Value8 = null;
				Value9 = null;
				Value10 = null;
				

				if(isInFldConnected("elementNames") && !inputBuf.isNull(inRowNum,0))
				{
					strBuf.setLength(0);
					inputBuf.getStringBuffer(inRowNum,0,strBuf);
					elementNames = strBuf.toString();
				}

				if(isInFldConnected("targetFileName") && !inputBuf.isNull(inRowNum,1))
				{
					strBuf.setLength(0);
					inputBuf.getStringBuffer(inRowNum,1,strBuf);
					targetFileName = strBuf.toString();
				}

				if(isInFldConnected("oneFilePerInputRow") && !inputBuf.isNull(inRowNum,2))
				{
					strBuf.setLength(0);
					inputBuf.getStringBuffer(inRowNum,2,strBuf);
					oneFilePerInputRow = strBuf.toString();
				}

				if(isInFldConnected("rootElement") && !inputBuf.isNull(inRowNum,3))
				{
					strBuf.setLength(0);
					inputBuf.getStringBuffer(inRowNum,3,strBuf);
					rootElement = strBuf.toString();
				}

				if(isInFldConnected("level1Element") && !inputBuf.isNull(inRowNum,4))
				{
					strBuf.setLength(0);
					inputBuf.getStringBuffer(inRowNum,4,strBuf);
					level1Element = strBuf.toString();
				}

				if(isInFldConnected("Value1") && !inputBuf.isNull(inRowNum,5))
				{
					strBuf.setLength(0);
					inputBuf.getStringBuffer(inRowNum,5,strBuf);
					Value1 = strBuf.toString();
				}

				if(isInFldConnected("Value2") && !inputBuf.isNull(inRowNum,6))
				{
					strBuf.setLength(0);
					inputBuf.getStringBuffer(inRowNum,6,strBuf);
					Value2 = strBuf.toString();
				}

				if(isInFldConnected("Value3") && !inputBuf.isNull(inRowNum,7))
				{
					strBuf.setLength(0);
					inputBuf.getStringBuffer(inRowNum,7,strBuf);
					Value3 = strBuf.toString();
				}

				if(isInFldConnected("Value4") && !inputBuf.isNull(inRowNum,8))
				{
					strBuf.setLength(0);
					inputBuf.getStringBuffer(inRowNum,8,strBuf);
					Value4 = strBuf.toString();
				}

				if(isInFldConnected("Value5") && !inputBuf.isNull(inRowNum,9))
				{
					strBuf.setLength(0);
					inputBuf.getStringBuffer(inRowNum,9,strBuf);
					Value5 = strBuf.toString();
				}

				if(isInFldConnected("Value6") && !inputBuf.isNull(inRowNum,10))
				{
					strBuf.setLength(0);
					inputBuf.getStringBuffer(inRowNum,10,strBuf);
					Value6 = strBuf.toString();
				}

				if(isInFldConnected("Value7") && !inputBuf.isNull(inRowNum,11))
				{
					strBuf.setLength(0);
					inputBuf.getStringBuffer(inRowNum,11,strBuf);
					Value7 = strBuf.toString();
				}

				if(isInFldConnected("Value8") && !inputBuf.isNull(inRowNum,12))
				{
					strBuf.setLength(0);
					inputBuf.getStringBuffer(inRowNum,12,strBuf);
					Value8 = strBuf.toString();
				}

				if(isInFldConnected("Value9") && !inputBuf.isNull(inRowNum,13))
				{
					strBuf.setLength(0);
					inputBuf.getStringBuffer(inRowNum,13,strBuf);
					Value9 = strBuf.toString();
				}

				if(isInFldConnected("Value10") && !inputBuf.isNull(inRowNum,14))
				{
					strBuf.setLength(0);
					inputBuf.getStringBuffer(inRowNum,14,strBuf);
					Value10 = strBuf.toString();
				}

				if(isVerboseData)
				{
					InfaMessage infaMsg = JtxMsg.getInfaMessage(JtxMsg.BEGIN_INPUT_ROW);
					utilsServer.logMsg(infaMsg.getId(), prefix, ELogMsgLevel.INFO, infaMsg.getMessage());
				}

				// Start of 'On Input Row' code snippet.
				resultCode ="OK";
				resultMessage = "No errors encountered.";
				nrFilesCreated = nrFiles;
				
				partNrRows++;
				synchronized(lock)
						{
							nrRows++;
						}
				//log input and settings for each partition
				if (partNrRows == 1) {
					elements = elementNames; 
					root = rootElement;
					level1 = level1Element;
					target = targetFileName;
					oneFilePerRow = oneFilePerInputRow;
					pathXml = Paths.get(target);
					rc=checkSettings();
					outSettings();
				}
				if (rc == 0) {
				} else {
					failSession("checkSettings reported an error. Run aborted");
				}
				
				values = new ArrayList<String>(); 
				if(Value1 != null) values.add(Value1);  
				if(Value2 != null) values.add(Value2);  
				if(Value3 != null) values.add(Value3);  
				if(Value4 != null) values.add(Value4);  
				if(Value5 != null) values.add(Value5);  
				if(Value6 != null) values.add(Value6);  
				if(Value7 != null) values.add(Value7);  
				if(Value8 != null) values.add(Value8);  
				if(Value9 != null) values.add(Value9);  
				if(Value10 != null) values.add(Value10);  
				
				logInfo("Received >" + values.size() +"< value(s).");
				elementList = new ArrayList<String>(Arrays.asList(elements.split(";"))); 
				logInfo("Received >" + elementList.size() +"< element(s).");
				
				rc = checkInput();
				if (rc == 0) {
					
				} else {
					failSession("input row in current partition >" + partNrRows + "< generated an error.");
				}
				
				
				// ToDo: Enter code to process an input row here.
				//You can access an input column data by referring the input column name
				// You can set an output column data by referring the output column name
				// For example, if
				// input1 and input2 are input ports of type int, and
				// output1 and output2  are output ports of type int
				// then transformation logic can be like as follows:
				// 
				// if(!isNull("input1") && !isNull("input1"))
				// {
				//		output1 = input1 + input2;
				//		output2 = input1 - input2;
				// }
				// else
				// {
				//		setNull("output1");
				//		setNull("output2");
				//		partCountNullRows++;
				//		synchronized(lock)
				//		{
				//			countNullRows++;
				//		}
				// }
				
				if(oneFilePerRow.equals("Y")) {
					generateXmlFile();
				}
				
				// End of 'On Input Row' code snippet.

				if(isFatalExceptionThrown)
				{
					throw new JTXFatalException(fatalMsg);
				}

				if(isVerboseData)
				{
					InfaMessage infaMsg = JtxMsg.getInfaMessage(JtxMsg.EXIT_INPUT_ROW);
					utilsServer.logMsg(infaMsg.getId(), prefix, ELogMsgLevel.INFO, infaMsg.getMessage());
				}

				if(transScope == TransformationScope.row)
				{
					flushBuf();
				}

			}
			catch (SDKException e)
			{
				handleException(e);
			}
			prepareForInputRow();
		}
	}

	/**
	 * This function is called by the Integration Service when no more data is 
	 * available for the input group.
	 * @param iGroup input group for which all the data has been processed.
	 */
	public void eofNotification(IGroup group) throws SDKException
	{
		try
		{
			if(outputBuf == null)
			{
				outputBuf = (IOutputBuffer)getOutputBuffers().get(0);
			}

			if(isVerbose)
			{
				InfaMessage infaMsg = JtxMsg.getInfaMessage(JtxMsg.BEGIN_END_OF_DATA);
				utilsServer.logMsg(infaMsg.getId(), prefix, ELogMsgLevel.INFO, infaMsg.getMessage());
			}
			// Start of 'On End of Data' code snippet.
			// ToDo: Enter code that executes when all the input data is received by the transformation here
			// 
			// logInfo("The number of null rows for this partition is : " + partCountNullRows);
			// synchronized(lock)
			// {
			//		logInfo("The total number of null rows across partitions till now is : " +  countNullRows);
			// }
			logInfo("The number of rows for this partition is: " + partNrRows);
			fixedNrFiles = partNrFiles -1;
			logInfo("The number of files for this partition is: " + fixedNrFiles);
			synchronized(lock)
			 {
			 	logInfo("The total number of rows across partitions till now is: " + nrRows);
			 	fixedNrFiles = nrFiles -1;
			 	logInfo("The total number of files across partitions till now is: " + fixedNrFiles);
			 }
			 
			generateRow();
			
			
			// End of 'On End of Data' code snippet.
			if(isFatalExceptionThrown)
			{
				throw new JTXFatalException(fatalMsg);
			}
			if(isVerbose)
			{
				InfaMessage infaMsg = JtxMsg.getInfaMessage(JtxMsg.EXIT_END_OF_DATA);
				utilsServer.logMsg(infaMsg.getId(), prefix, ELogMsgLevel.INFO, infaMsg.getMessage());
			}
			flushBuf();
		}
		catch(SDKException e)
		{
			handleException(e);
		}
	}

	/**
	 * This function is called by the Integration Service when there is a 
	 * transaction notification. This function will be called only if 
	 * Java Transformation has the 'Transformation Scope' set to 'transaction'.
	 * @param transType one of COMMIT or ROLLBACK.
	 */
	public void inputTransaction(int transType) throws SDKException
	{
		try
		{
			if(isVerbose)
			{
				InfaMessage infaMsg = JtxMsg.getInfaMessage(JtxMsg.BEGIN_TRANSACTION);
				utilsServer.logMsg(infaMsg.getId(), prefix, ELogMsgLevel.INFO, infaMsg.getMessage());
			}
			// Start of 'On Receiving Transaction' code snippet.
			// ToDo: Enter code that executes when a transaction is received by the transformation
			
			
			
			// End of 'On Receiving Transaction' code snippet.
			if(isFatalExceptionThrown)
			{
				throw new JTXFatalException(fatalMsg);
			}
			if(isVerbose)
			{
				InfaMessage infaMsg = JtxMsg.getInfaMessage(JtxMsg.EXIT_TRANSACTION);
				utilsServer.logMsg(infaMsg.getId(), prefix, ELogMsgLevel.INFO, infaMsg.getMessage());
			}
			flushBuf();
			outputBuf = (IOutputBuffer) getOutputBuffers().get(0);
		}
		catch(SDKException e)
		{
			handleException(e);
		}
	}

	/**
	 * This is a callable API and is not called by the Integration Service. 
	 * This function is called by user to generate an output row in 
	 * 'On Input Row', 'On Transactaction' and 'On End of Data' snippets 
	 * for an active transformation.
	 */
	private void generateRow() throws SDKException
	{
		if(isOutFldProjected("resultCode") && (!isSetNullCalled("resultCode")))
		{
			if(resultCode == null)
				outputBuf.setNull(outRowNum, 0);
			else
			{
				try
				{
					outputBuf.setString(outRowNum, 0, resultCode);
				}
				catch(DataTruncatedException e)
				{
					handleDataTruncatedException("resultCode");
				}
			}
		}

		if(isOutFldProjected("resultMessage") && (!isSetNullCalled("resultMessage")))
		{
			if(resultMessage == null)
				outputBuf.setNull(outRowNum, 1);
			else
			{
				try
				{
					outputBuf.setString(outRowNum, 1, resultMessage);
				}
				catch(DataTruncatedException e)
				{
					handleDataTruncatedException("resultMessage");
				}
			}
		}

		if(isOutFldProjected("nrFilesCreated") && (!isSetNullCalled("nrFilesCreated")))
		{
			try
			{
			outputBuf.setLong(outRowNum,2, nrFilesCreated);
			}
			catch(DataTruncatedException e)
			{
				handleDataTruncatedException("nrFilesCreated");
			}
		}
		incrementOutputRowNumber();
		flushBufWhenFull();
		clearNullColSet();
	}


}